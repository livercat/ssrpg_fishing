// Internal

var _log = []
var _indent = 0


// Config

var offsetX = 1
var offsetY = 1
var maxHeight = 24
var indentStr = "  "
var maxLineLength = 60

var purgeOldest = true

var multipleColumns = false
var columnWidth = 30
var maxColumns = 3
// Core

func LogC(msg, color)
  var indent = ""
  ?_indent > 0
    for i = 0..(_indent - 1)
      indent = indent + indentStr
  var s = indent + msg
  ?string.Size(s) > maxLineLength
    s = string.Sub(s, 0, maxLineLength)
  _log.Add([s, color])
  ?purgeOldest & _log.Count() > maxHeight * maxColumns
    _log.RemoveAt(0)

func Clear()
  _log.Clear()
  _indent = 0


// Grouping

func Group()
  _indent++

func LabeledGroup(label)
  Log(label)
  Group()

func LabeledGroupC(label, color)
  LogC(label, color)
  Group()

func GroupEnd()
  ?_indent > 0
    _indent--

func GroupEndAll()
  _indent = 0


// Derivative

func Log(msg)
  LogC(msg, "#white")

func Success(msg)
  LogC(msg, "#green")

func Failure(msg)
  LogC(msg, "#red")

func Info(msg)
  LogC(msg, "#cyan")

func Warn(msg)
  LogC(msg, "#yellow")

func Error(msg)
  LogC(msg, "#red")

func NewLine()
  Log("")


// Rendering

func RenderLog()
  ?_log.Count() > 0
    for i = 0..(_log.Count() - 1)
      var msg = _log[i][0]
      var color = _log[i][1]
      var row = i
      var column = 0
      ?multipleColumns
        row = i % maxHeight
        column = math.FloorToInt(i / maxHeight) 
      >`@offsetX + column * columnWidth@,@offsetY + row@,@color@,@msg@
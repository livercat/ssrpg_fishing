var utils = import Games/Fishing2/Utils
var progress = import Games/Fishing2/Progress
var hirelingData = import Games/Fishing2/Data/HirelingData
var sprites = import Games/Fishing2/Assets/ShopSprites

var level = 0

var color = hirelingData.color[0]
var baseCost = hirelingData.baseCost[0]
var costFactor = hirelingData.costFactor[0]
var maxAmount = hirelingData.maxAmount[0]

var baseScalesPerS = hirelingData.baseScalesPerS[0]
var stepScalesPerS = hirelingData.stepScalesPerS[0]

var baseMinWaitTime = hirelingData.baseWaitTimeRange[0][0]
var baseMaxWaitTime = hirelingData.baseWaitTimeRange[0][1]

var sprite = sprites.spriteHireling

func ToString()
  return "Hireling(lvl=" + level + ",color=" + color + ",cost=" + 
  ^utils.FormatCost(RealCost()) + ")"

func Make(level)
  this.level = level

  ?level >= hirelingData.minLevel & level <= hirelingData.maxLevel
    color = hirelingData.color[level]
    baseCost = hirelingData.baseCost[level]
    costFactor = hirelingData.costFactor[level]
    maxAmount = hirelingData.maxAmount[level]

    baseScalesPerS = hirelingData.baseScalesPerS[level]
    stepScalesPerS = hirelingData.stepScalesPerS[level]

    baseMinWaitTime = hirelingData.baseWaitTimeRange[level][0]
    baseMaxWaitTime = hirelingData.baseWaitTimeRange[level][1]
  :
    utils.Panic("Unsupported hireling level: " + level)

  return this

func GetOwnedAmount()
  return progress.hirelings[level]

func GetMinWaitTime()
  return math.Max(baseMinWaitTime - progress.hirelings[level] * hirelingData.waitTimeReductionFactor, hirelingData.waitTimeRangeMin[0])

func GetMaxWaitTime()
  return math.Max(baseMaxWaitTime - progress.hirelings[level] * hirelingData.waitTimeReductionFactor, hirelingData.waitTimeRangeMin[1])

func GetScalesPerSecond()
  return baseScalesPerS + stepScalesPerS*progress.hirelings[level]

func RealCost() // For componded value: x = base*(1+factor)^owned
  return math.BigNumber(baseCost).Mul(math.Pow(1 + costFactor, progress.hirelings[level]))
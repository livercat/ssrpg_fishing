var progress = import Games/Fishing2/Progress
var offline = import Games/Fishing2/PassiveComponents/Offline
var topHud = import Games/Fishing2/FishingComponents/HUD
var hirelingData = import Games/Fishing2/Data/HirelingData
var styles = import Games/Fishing2/Assets/Styles
var sprites = import Games/Fishing2/Assets/PassiveSprites

var actives = []
var activeRoot = null
var offlineDialog = null
var newestHire = null

func Init()
  // Create root panel for hirelings & labels
  activeRoot = ui.AddPanel()
  activeRoot.style = styles.invisStyle
  activeRoot.dock = top_center
  activeRoot.anchor = top_center
  activeRoot.w = 1
  activeRoot.h = 1
  activeRoot.x = 0
  activeRoot.y = 0
  // Skip rest of init if zero white hirelings purchased
  ?progress.hirelings[0] = 0
    return
  // Init offline values for calcs
  offline.Init()
  // Iterate purchased hirelings
  for idx = 0..hirelingData.maxLevel
    // End iteration once hireling level found with amount zero
    var count = progress.hirelings[idx]
    ?count = 0
      idx = -2
    :
      // Create new active hireling instance and add to list
      var online = new Games/Fishing2/PassiveComponents/Online
      online.MakeActiveHire(idx, activeRoot)
      actives.Add(online)
      // Calculate scales earned by hireling while offline
      offline.CalculateGain(online.hireling)
  // Display offline gain dialog
  DisplayOfflineGain()
  progress.AddScales(offline.totalScalesOffline)
  progress.UpdateLastOnline()
  topHud.Update()

func AddNewHire(level)
  // Check if new hire is first hireling of given level puchased
  ?progress.hirelings[level] = 1
    // Create "new hire" active hireling and add to list
    var online = new Games/Fishing2/PassiveComponents/Online
    online.MakeActiveHire(level, activeRoot)
    actives.Add(online)
    // Set newest hire to intro state and reset any previous from shop session
    ?newestHire ! null & newestHire.state = newhire
      newestHire.state = null
    newestHire = online
    newestHire.state = newhire
  :
    // Update active if hireling of same level already purchased
    actives[level].label.text = te.xt("x"+progress.hirelings[level])
    // ?actives[level].state = waiting // NOTE: No longer updating timer after purchase
    //   actives[level].UpdateTimer()  //       wait time reduction is negligible

func DisplayOfflineGain()
  ?offlineDialog = null
    // Create bubble dialog animation
    offlineDialog = ui.AddPanel()
    activeRoot.Add(offlineDialog)
    offlineDialog.style = styles.invisStyle
    offlineDialog.dock = top_left
    offlineDialog.anchor = top_left
    offlineDialog.w = 1
    offlineDialog.h = 1
    // Position dialog by base level hireling
    offlineDialog.x = actives[0].root.x
    offlineDialog.y = actives[0].root.y + 2

    // BG fill so entirety of bubble is opaque
    var backer = ui.AddAnim(sprites.spriteOfflineDialogBG)
    offlineDialog.Add(backer)
    backer.anchor = bottom_right
    backer.x = -3
    backer.y = -1

    // Text box for update msg
    var msg = string.Format(te.xt(tid_fish_return), offline.totalScalesOffline.ToString())
    var label = ui.AddText(msg)
    offlineDialog.Add(label)
    label.anchor = bottom_right
    label.w = 25
    label.h = 2
    label.x = -4
    label.y = -1
    label.align = center

    // Actual bubble anim
    var bubble = ui.AddAnim(sprites.spriteOfflineDialog)
    offlineDialog.Add(bubble)
    bubble.anchor = bottom_right
    bubble.color =  #white
    bubble.duration = 6
    bubble.Play()
  :
    // Recycle once this func is called again
    offlineDialog.Recycle()
    offlineDialog = null

func Update(gameState)
  // Call update for active hirelings
  for h : actives
    h.Update(gameState)
  // Update lastOnline every second
  ?time % 30 = 0
    progress.UpdateLastOnline()
  // Remove offline dialog after player arrival
  ?gameState ! Arriving & offlineDialog ! null
    DisplayOfflineGain()

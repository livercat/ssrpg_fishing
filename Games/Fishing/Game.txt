var fisher = import Games/Fishing/FishingComponents/Player
var progress = import Games/Fishing/Progress
var topHud = import Games/Fishing/FishingComponents/HUD
var passive = import Games/Fishing/Passive
var shop = import Games/Fishing/Shop
var logo = import Games/Fishing/FishingComponents/Logo
var resultDialog = import Games/Fishing/FishingComponents/ResultsDialog
var fishFactory = import Games/Fishing/FishingComponents/FishFactory
var flyup = new Games/FlyupText
var styles = import Games/Fishing/Assets/Styles

var version = "1.0"

var x = 0
var y = 0
// var s = ""

// var uiX = -11
var uiY = 7
var barColor = #303030
var progressValue = 1000
var progressPositive = 7
var progressNegative = 14
// var progressX = uiX + 1
// var progressY = uiY + 3
var progressColor = 00ff00

var fishWidth = 600
var fishArea = 2300
var fishLimit = fishArea - fishWidth
var fishMinSpeed = -70
var fishMaxSpeed = 100
// var fishAccelDelay = 30
var reelImpulse = 260
var reelBadLow = 200
var reelGoodLow = 600
var reelGoodHigh = 1200
var reelBadHigh = 1600

var catchingPanel = null
var catchingFrame = null
var catchingZoneOutside = null
var catchingZoneInside = null
var catchingBar = null
var catchingFish = null
var catchingFtueText = null

var fishPos = 0
var fishSpeed = 0
var fishAccel = 0
var fishDrawX = 0
var fishDrawY = uiY + 1
var fish

var waitTimeMin = 30 * 2
// var waitTimeMax = 30 * 10

// States:
// - Hidden
// - Arriving
// - Menu
// - Throwing
// - Waiting
// - FTUE
// - Catching
// - Fail1
// - Fail2
// - Success1
// - Success2
// - Success3
// - Collection
// - Shop

var state = null
var stateTime = 0
var currentStateFunction = null

// Used by Throwing Stones quest to delay showing the results dialog
var preventStateSuccess3 = false

var playButton = null
var shopButton = null


func AddMenuUI()
  ?playButton = null
    playButton = ui.AddButton()
    playButton.anchor = top_right
    playButton.dock = top_right
    playButton.x = -13
    playButton.y = 12
    playButton.style = 1
    playButton.text = te.xt(Play)
    playButton.SetPressed(OnPlayPressed)
  :
    playButton.visible = true

  ?shopButton = null
    shopButton = ui.AddButton()
    shopButton.anchor = top_right
    shopButton.dock = top_right
    shopButton.x = -13
    shopButton.y = 17
    shopButton.style = 1
    shopButton.text = te.xt(Shop)
    shopButton.SetPressed(OnShopPressed)
  :
    shopButton.visible = true


func RemoveMenuUI()
  ?playButton ! null
    playButton.visible = false
  ?shopButton ! null
    shopButton.visible = false


func AddCatchingUI()
  ?catchingPanel
    catchingPanel.visible = true
    return

  // Base panel
  catchingPanel = ui.AddPanel()
  catchingPanel.x = 0
  catchingPanel.y = -1
  catchingPanel.w = 25
  catchingPanel.h = 5
  catchingPanel.ay = bottom
  catchingPanel.dy = bottom

  // The visual design of the panel
  catchingFrame = ui.AddAnim(ascii
┌───────────────────────┐
│                       │
├───────────────────────┤
│                       │
└───┴───┴───┴───┴───┴───┘
asciiend)
  catchingPanel.Add(catchingFrame)
  catchingFrame.color = barColor

  // The grey sections above and below the fish, indicating valid zone
  catchingZoneOutside = ui.AddPanel()
  catchingPanel.Add(catchingZoneOutside)
  catchingZoneOutside.style = styles.horizontalBarsStyle
  catchingZoneOutside.w = 11
  catchingZoneOutside.h = 3
  catchingZoneOutside.x = 7
  catchingZoneOutside.y = 0
  catchingZoneOutside.anchor = top_left
  catchingZoneOutside.dock = top_left
  catchingZoneOutside.color = #888888
  catchingZoneInside = ui.AddPanel()
  catchingPanel.Add(catchingZoneInside)
  catchingZoneInside.style = styles.horizontalBarsStyle
  catchingZoneInside.w = 7
  catchingZoneInside.h = 3
  catchingZoneInside.x = 9
  catchingZoneInside.y = 0
  catchingZoneInside.anchor = top_left
  catchingZoneInside.dock = top_left

  // The progress bar inside the panel
  catchingBar = ui.AddPanel()
  catchingPanel.Add(catchingBar)
  catchingBar.style = styles.fullBoxStyle
  catchingBar.x = 1
  catchingBar.y = 3
  catchingBar.w = 12
  catchingBar.h = 1
  catchingBar.anchor = top_left
  catchingBar.dock = top_left

  // Fish sprite inside panel
  catchingFish = ui.AddAnim(ascii
<°((><
asciiend)
  catchingPanel.Add(catchingFish)
  catchingFish.x = 9
  catchingFish.y = 1
  catchingFish.anchor = top_left
  catchingFish.dock = top_left
  catchingFish.pivotX = -1
  catchingFish.color = #white


func AddFTUE_UI()
  var msg = te.xt("tid_fish_ftue_1")
  catchingFtueText = ui.AddText(msg)
  catchingPanel.Add(catchingFtueText)
  catchingFtueText.x = 0
  catchingFtueText.y = 0
  catchingFtueText.w = 69
  catchingFtueText.h = 1
  catchingFtueText.anchor = bottom_center
  catchingFtueText.dock = top_center
  catchingFtueText.align = center


func RemoveCatchingUI()
  catchingPanel.visible = false
  ?catchingFtueText
    catchingFtueText.text = ""
  

func OnPlayPressed()
  SetState(Throwing)


func OnShopPressed()
  SetState(Shop)


func Reset()
  RemoveMenuUI()
  SetState(Hidden)


func GetState()
  return state


func SetState(newState)

  // Exit state

  ?newState ! state & state = Arriving
    fisher.playerAnimWalk.visible = false
    fisher.playerAnimArrived.visible = false

  :?newState ! state & state = Menu
    RemoveMenuUI()

  :?newState ! state & state = Throwing
    fisher.playerAnimThrowing.visible = false

  :?newState ! state & state = Catching
    RemoveCatchingUI()

  :?newState ! state & state = Fail2
    fisher.playerAnimCatching.visible = false

  :?newState ! state & state = Success3
    resultDialog.Hide()
    fisher.playerAnimCatching.visible = false

  :?newState ! state & state = Shop
    // Update the rod if it changed after exiting the shop
    // TODO: Animate new rod?
    ?rod.level ! progress.rod
      var rodFactory = new Games/Fishing/Rod
      rod = rodFactory.Make(progress.rod)
      fisher.playerAnimNewRod.frame = 0
      fisher.playerAnimNewRod.visible = true
      fisher.playerAnimNewRod.Play()
      play treasure_item_rainbow
      fisher.rod = rod
      fisher.Update()
  

  // Enter state

  ?newState = Hidden
    currentStateFunction = UpdateStateHidden

  :?newState = Arriving
    currentStateFunction = UpdateStateArriving
    logo.Reset()
    fisher.playerAnimWalk.visible = true
    fisher.playerAnimWalk.Play()

  :?newState = Menu
    currentStateFunction = UpdateStateMenu
    enable pause
    AddMenuUI()
    fisher.playerAnimThrowing.visible = true
    fisher.playerAnimThrowing.frame = 0
    ?fisher.playerAnimBigHead
      fisher.playerAnimBigHead.flipX = true
      fisher.playerAnimExpressions.frame = 0
    
  :?newState = Throwing
    currentStateFunction = UpdateStateThrowing
    logo.Hide()
    disable pause
    fisher.playerAnimThrowing.Play()
    
  :?newState = Shop
    currentStateFunction = UpdateStateShop
    shop.shopIsHidden = false
    shopButton.visible = false

  :?newState = Waiting
    currentStateFunction = UpdateStateWaiting
    fisher.playerAnimCatching.visible = true
    fisher.playerAnimCatching.frame = 0

  :?newState = FTUE
    currentStateFunction = UpdateStateFTUE
    AddCatchingUI()
    AddFTUE_UI()
    
  :?newState = Catching
    currentStateFunction = UpdateStateCatching
    AddCatchingUI()
  
  :?newState = Fail1
    currentStateFunction = UpdateStateFail1
    fisher.playerAnimCatching.frame = 1
    ?fisher.playerAnimExpressions
      fisher.playerAnimExpressions.frame = 1

  :?newState = Fail2
    currentStateFunction = UpdateStateFail2
    play error
    fisher.playerAnimCatching.frame = 2
    ?fisher.playerAnimExpressions
      fisher.playerAnimExpressions.frame = 2

  :?newState = Success1
    currentStateFunction = UpdateStateSuccess1
    fisher.playerAnimCatching.frame = 1
    ?fisher.playerAnimExpressions
      fisher.playerAnimExpressions.frame = 1

  :?newState = Success2
    currentStateFunction = UpdateStateSuccess2
    play pickup_success
    fisher.playerAnimCatching.frame = 2
    ?fisher.playerAnimExpressions
      fisher.playerAnimExpressions.frame = 3

  :?newState = Success3
    currentStateFunction = UpdateStateSuccess3
    x = screen.w / 2 - 27
    y = screen.h / 2 - 5
    flyup.Show(x, y, string.Format(te.xt(tid_fish_scales), fish.scales))
    progress.AddScales(fish.scales)
    topHud.Update()
    var isRecordWeight = progress.CheckRecord(fish.scales)
    resultDialog.Show(fish, isRecordWeight)

  state = newState
  stateTime = 0


var rod = null

func Init()
  ?rod = null
    var rodFactory = new Games/Fishing/Rod
    rod = rodFactory.Make(progress.rod)
    fisher.rod = rod

    disable hud
    disable player

    topHud.Init()
    logo.Init(version)
    resultDialog.Init()
    passive.Init()
    fisher.InitPlayerAnimations()


func UpdateStateHidden()
  Init()
  SetState(Arriving)


func UpdateStateArriving()
  logo.Update()
  fisher.UpdatePlayerAnimPosition()

  ?pos.x = -25
    logo.Show()

  :?fisher.playerAnimWalk.visible & pos.x = -4
    fisher.playerAnimWalk.visible = false
    fisher.playerAnimArrived.visible = true
    fisher.playerAnimArrived.Play()

  :?fisher.playerAnimArrived.visible & !fisher.playerAnimArrived.playing
    SetState(Menu)


func UpdateStateMenu()
  logo.Update()
  flyup.Update()
  // Wait for button event to OnPlayPressed


func UpdateStateThrowing()
  logo.Update()

  ?stateTime = 5
    play grappling_idle

  :?stateTime = 13
    play cross_deadwood_row

  :?stateTime >= 18
    SetState(Waiting)


func UpdateStateWaiting()
  logo.Update()

  ?stateTime >= waitTimeMin
    ?catchingFtueText = null & progress.IsFTUE()
      SetState(FTUE)
    :
      SetState(Catching)

    play haunted_gate_shuffle_fast

    // Reset progress bar
    progressValue = fishArea * 3 / 5

    // Reset fish
    fishPos = fishLimit / 2
    fishSpeed = 0

    fish = fishFactory.MakeFish(rod.lootTable)
    fishAccel = fish.acceleration


func UpdateStateFTUE()
  catchingFtueText.visible = true

  ?key = primaryBegin
    var msg = te.xt("tid_fish_ftue_2") + "\n" + te.xt("tid_fish_ftue_3") + "\n" + " ↓ "
    catchingFtueText.text = msg
    catchingFtueText.h = 3

    SetState(Catching)

  // Blink FTUE text
  :?time % 18 >= 9
    catchingFtueText.visible = false


func UpdateStateCatching()

    // Select player anim frame based on primary input or not
    ?key = primary
      fisher.playerAnimCatching.frame = 1
    :
      fisher.playerAnimCatching.frame = 0

    // Control the fishing rod
    ?key = primaryBegin
      fishSpeed += reelImpulse

    // Apply force of fish pulling away
    fishSpeed -= fishAccel

    // Frame skip to gain performance
    ?stateTime % 2 = 0
      return

    // Constrain speed
    fishSpeed = math.Clamp(fishSpeed, fishMinSpeed, fishMaxSpeed)

    // Simulate
    fishPos += fishSpeed + fishSpeed

    // Constrain position
    fishPos = math.Clamp(fishPos, 0, fishLimit)

    // Update progress
    ?fishPos < reelBadLow | fishPos > reelBadHigh
      // Bad area
      catchingBar.color = #ff0000
      progressValue -= progressNegative
      ?progressValue < 0
        // Failure condition
        SetState(Fail1)

    :?fishPos >= reelGoodLow & fishPos <= reelGoodHigh
      // Good area
      catchingBar.color = #ffffff
      progressValue += progressPositive
      ?progressValue > fishArea
        // Victory condition
        SetState(Success1)
    :
      // Neutral area
      catchingBar.color = #bbbbbb

    // Update UI components to match simulation
    catchingBar.w = math.CeilToInt(progressValue / 100.0)
    catchingFish.x = fishPos / 100


func UpdateStateFail1()
  ?stateTime >= 20
    SetState(Fail2)


func UpdateStateFail2()
  ?key = primaryBegin & stateTime > 1
    SetState(Menu)
    logo.Show()

  // Failure message
  ?fishPos < fishLimit / 2
    >o-4,-4,@te.xt(tid_fish_got_away)@
  :
    >o-4,-4,@te.xt(tid_fish_line_snapped)@


func UpdateStateSuccess1()
  ?stateTime >= 30
    SetState(Success2)


func UpdateStateSuccess2()
  ?stateTime >= 45 & !preventStateSuccess3
    SetState(Success3)
  
  // Draw the fish
  fish.DrawO(-15, 1)


func UpdateStateSuccess3()
  flyup.Update()

  ?key = primaryBegin & stateTime > 1
    SetState(Menu)
    logo.Show()
  
  // Draw the fish
  fish.DrawO(-15, 1)


func UpdateStateShop()
  shop.Update(SetState)


func Update()
  stateTime++
  currentStateFunction()
  passive.Update(state)


SetState(Hidden)
var utils = import Games/Fishing/Utils
var fishData = import Games/Fishing/Data/FishData

func PickLoot(lootTable)
  var weightTotal = 0
  // Total Weight
  for i = 0..(lootTable.Count() - 1)
    weightTotal = weightTotal + lootTable[i][0]
  
  // Weighted Choice
  var cummulativeSum = 0
  var selectedIndex = 0
  var roll = utils.RngRange(0, weightTotal - 1)

  for i = 0..(lootTable.Count() - 1)
    ?cummulativeSum > roll
      break
    cummulativeSum = cummulativeSum + lootTable[i][0]
    selectedIndex = i

  return lootTable[selectedIndex][1]

func MakeFish(lootTable)
  var fish = new Games/Fishing/FishingComponents/Fish

  var fishIndex = PickLoot(lootTable)

  ?fishIndex >= fishData.minIndex & fishIndex <= fishData.maxIndex
    fish.name = fishData.name[fishIndex]
    fish.art = fishData.art[fishIndex]
    fish.color = fishData.color[fishIndex]
    fish.rodPivotX = fishData.rodPivot[fishIndex][0]
    fish.rodPivotY = fishData.rodPivot[fishIndex][1]
    fish.acceleration = fishData.acceleration[fishIndex]

    var scalesMin = fishData.scalesRange[fishIndex][0]
    var scalesMax = fishData.scalesRange[fishIndex][1]
    fish.scales = utils.RngRange(scalesMin, scalesMax)
    var weightD = (fish.scales / 10)
    fish.weight = weightD + "." + (fish.scales - weightD * 10)
    //>@fish.scalesMin@, @fish.scalesMax@, @fish.scales@; @weightD@, @fish.weight@
  :
    utils.Panic("Unsupported fish index: " + fishIndex)

  return fish

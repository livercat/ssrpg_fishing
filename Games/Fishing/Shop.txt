var progress = import Games/Fishing/Progress
var shopKeeper = import Games/Fishing/ShopComponents/ShopKeeper
var _ui = import Games/Fishing/ShopComponents/UIFactory
var utils = import Games/Fishing/Utils
var topHud = import Games/Fishing/FishingComponents/HUD
var passive = import Games/Fishing/Passive
var hirelingData = import Games/Fishing/Data/HirelingData
var rodData = import Games/Fishing/Data/RodData
var styles = import Games/Fishing/Assets/Styles
var sprites = import Games/Fishing/Assets/ShopSprites

var failedPurchaseDuration = 30 // frames

// shop animation
var shopPanelSpeed = 2
var shopPanelOvershoot = true
var shopIsHidden = true

// shop UI elements
var shopRoot = null
var rowsPanel = null
var rodsRow = null
var hirelingsRow = null
var openShopButton = null
var backButton = null
var purchaseFailedTimer = null
var purchaseFailedLabel = null

var rods = []
var hirelings = []

func Init()
  ?shopRoot ! null
    return
  // the base shop panel
  shopRoot = ui.AddPanel()
  shopRoot.visible = true
  shopRoot.style = styles.noBorderStyle
  shopRoot.y = screen.h
  shopRoot.w = screen.w+2
  shopRoot.h = screen.h+2
  
  topHud.DrawOnTop()
  topHud.Update()

  // shopkeeper NPC
  shopKeeper.Init(shopRoot)
  
  backButton = _ui.MakeBackButton(CloseShop)
  shopRoot.Add(backButton)
  
  // panel with item rows
  rowsPanel = ui.AddPanel()
  rowsPanel.visible = inherit
  rowsPanel.dock = top_center
  rowsPanel.anchor = top_center
  rowsPanel.x = 0
  rowsPanel.y = 6
  rowsPanel.w = 57
  rowsPanel.h = screen.h - 4
  rowsPanel.style = styles.invisStyle
  shopRoot.Add(rowsPanel)

  // row with rods
  rodsRow = _ui.MakeShopRow(0)
  rowsPanel.Add(rodsRow)

  // row with hirelings
  hirelingsRow = _ui.MakeShopRow(7)
  rowsPanel.Add(hirelingsRow)

  /* Create all rods and their shop wrappers. By default owned rods are marked
  as "owned" instead of their cost. We mark the best owned rod as "current",
  and hide prices of all the following rods. */
  for idx = 0 .. rodData.maxLevel
    var rodFactory = new Games/Fishing/Rod
    var rod = rodFactory.Make(idx)

    var shopRodFactory = new Games/Fishing/ShopComponents/ShopItemSingle
    var shopRod = shopRodFactory.Init(rod, PurchaseRod, rodsRow)

    rods.Add(shopRod)

    ?idx < progress.rod
      shopRod.SetOwned()
    :?idx = progress.rod
      shopRod.SetCurrent()
    :?idx = progress.rod + 1
      shopRod.RevealCost()
    :
      shopRod.HideCost()

  /* Create all hirelings and their shop wrappers. We additionally hide all
  hirelings other than the ones we already have purchased at least one of, and the 
  next immediate one. */
  for idx = 0 .. hirelingData.maxLevel
    var hirelingFactory = new Games/Fishing/Hireling
    var hireling = hirelingFactory.Make(idx)

    var shopHireFactory = new Games/Fishing/ShopComponents/ShopItemMulti
    var shopHire = shopHireFactory.Init(hireling, PurchaseHireling, hirelingsRow)

    hirelings.Add(shopHire)


    ?idx > 0 & hireling.GetOwnedAmount() = 0 & hirelings[idx-1].baseItem.GetOwnedAmount() = 0
      shopHire.Hide()
    :
      shopHire.Reveal()
  
func CloseShop()
  shopIsHidden = true
  shopPanelOvershoot = true

func PurchaseRod(button)
  var shopRod = utils.FindButtonParent(button, rods)
  ?shopRod = null
    return utils.Panic("Rod purchase failed, can't identify its button")

  var cost = shopRod.baseItem.cost
  ?progress.scales >= cost
    play buy
    progress.SubtractScales(cost)
    progress.UpgradeRod()
    var idx = rods.IndexOf(shopRod)
    // 1. Mark purchased rod as current
    shopRod.SetCurrent()
    // 2. Mark previous rod as owned
    ?idx > 0
      rods[idx - 1].SetOwned()
    // 3. Reveal the price of the next rod
    ?idx + 1 < rods.Count()
      rods[idx + 1].RevealCost()
    // 4. Update HUD
    topHud.Update()
  :
    play error
    MarkFailedPurchase(shopRod.costLabel)

func PurchaseHireling(button)
  var shopHire = utils.FindButtonParent(button, hirelings)
  ?shopHire = null
    return utils.Panic("Hireling purchase failed, can't identify its button")
  ?shopHire.baseItem.GetOwnedAmount() >= shopHire.baseItem.maxAmount
    // if somehow attempted to buy a maxed out hireling, do nothing
    return
  
  var cost = shopHire.baseItem.RealCost()
  ?progress.scales >= cost
    play buy
    progress.SubtractScales(cost)
    var idx = hirelings.IndexOf(shopHire)
    // 1. Increment the owned amount
    progress.AddHireling(idx)
    // 2. Reveal the next hireling
    ?idx + 1 < hirelings.Count()
      hirelings[idx + 1].Reveal()
    // 3. Update hireling labels
    shopHire.Update()
    // 4. Update HUD
    topHud.Update()
    // 5. Update Passive
    passive.AddNewHire(idx)
  :
    play error
    MarkFailedPurchase(shopHire.costLabel)

func MarkFailedPurchase(label)
  ?purchaseFailedLabel = label
    // refresh the timer
    purchaseFailedTimer = time + failedPurchaseDuration
    return

  ?purchaseFailedLabel ! null
    // unmark the previous label
    purchaseFailedLabel.color = _ui.activeColor
  
  // mark the label
  label.color = _ui.errorColor
  purchaseFailedLabel = label
  purchaseFailedTimer = time + failedPurchaseDuration
  
func Update(SetGameState)
  ?shopIsHidden

    // hide the "Back" button right away
    ?backButton ! null
      backButton.visible = false

    ?shopRoot ! null
      // start the closing animation
      ?shopRoot.y < screen.h
        shopRoot.y = shopRoot.y + shopPanelSpeed
      :
        // animation is finished, return to the menu

        enable pause

        ?shopKeeper.state = msg1
          shopKeeper.label.text = te.xt(shopKeeper.msgReturned)
          shopKeeper.state = msg2

        shopRoot.y = screen.h
        shopRoot.visible = false

        SetGameState(Menu)
  :
    ?shopRoot = null
      Init()

    disable pause

    // start the opening animation
    ?shopRoot.y > -3 & shopPanelOvershoot
      shopRoot.y = shopRoot.y - shopPanelSpeed
      shopRoot.visible = true
    :
      // animation is finished, show the "Back" button
      ?backButton ! null
        backButton.visible = inherit

      ?shopRoot.y <= -3 & shopPanelOvershoot
        shopPanelOvershoot = false
      :?shopRoot.y < 0
        shopRoot.y = shopRoot.y + 1
      :
        shopRoot.y = 0
        ?shopKeeper.state ! done
          ?shopKeeper.icon.pivotX > 2
            ?shopKeeper.state = null
              shopKeeper.icon.visible = inherit
              shopKeeper.icon.loop = true
              shopKeeper.icon.duration = 15
              shopKeeper.icon.Play()
              shopKeeper.state = walk
            ?time % 2
              shopKeeper.icon.pivotX--
          :?shopKeeper.state = walk
            shopKeeper.icon.pivotX = 0
            shopKeeper.icon.Load(sprites.spriteKeeperArrived)
            shopKeeper.icon.frame = 0
            shopKeeper.icon.loop = false
            shopKeeper.icon.duration = 18
            shopKeeper.icon.Play()
            shopKeeper.state = arrived
          :?shopKeeper.state = arrived
            shopKeeper.dialog.visible = inherit
            shopKeeper.dialog.duration = 6
            shopKeeper.dialog.Play()
            play slave_npc
            shopKeeper.label.visible = inherit
            shopKeeper.state = msg1
          :?shopKeeper.state = msg2
            play slave_npc
            shopKeeper.state = done

  ?purchaseFailedTimer ! null & time >= purchaseFailedTimer
    purchaseFailedTimer = null
    purchaseFailedLabel.color = _ui.activeColor
    purchaseFailedLabel = null